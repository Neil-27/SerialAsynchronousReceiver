// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/06/2018 16:31:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DemoTop
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DemoTop_vlg_sample_tst(
	ack,
	clk,
	en,
	packet,
	rst,
	send,
	sampler_tx
);
input  ack;
input  clk;
input  en;
input [10:0] packet;
input  rst;
input  send;
output sampler_tx;

reg sample;
time current_time;
always @(ack or clk or en or packet or rst or send)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DemoTop_vlg_check_tst (
	dry,
	err,
	OQ,
	sampler_rx
);
input  dry;
input  err;
input [7:0] OQ;
input sampler_rx;

reg  dry_expected;
reg  err_expected;
reg [7:0] OQ_expected;

reg  dry_prev;
reg  err_prev;
reg [7:0] OQ_prev;

reg  dry_expected_prev;
reg  err_expected_prev;
reg [7:0] OQ_expected_prev;

reg  last_dry_exp;
reg  last_err_exp;
reg [7:0] last_OQ_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	dry_prev = dry;
	err_prev = err;
	OQ_prev = OQ;
end

// update expected /o prevs

always @(trigger)
begin
	dry_expected_prev = dry_expected;
	err_expected_prev = err_expected;
	OQ_expected_prev = OQ_expected;
end



// expected dry
initial
begin
	dry_expected = 1'bX;
end 

// expected err
initial
begin
	err_expected = 1'bX;
end 
// expected OQ[ 7 ]
initial
begin
	OQ_expected[7] = 1'bX;
end 
// expected OQ[ 6 ]
initial
begin
	OQ_expected[6] = 1'bX;
end 
// expected OQ[ 5 ]
initial
begin
	OQ_expected[5] = 1'bX;
end 
// expected OQ[ 4 ]
initial
begin
	OQ_expected[4] = 1'bX;
end 
// expected OQ[ 3 ]
initial
begin
	OQ_expected[3] = 1'bX;
end 
// expected OQ[ 2 ]
initial
begin
	OQ_expected[2] = 1'bX;
end 
// expected OQ[ 1 ]
initial
begin
	OQ_expected[1] = 1'bX;
end 
// expected OQ[ 0 ]
initial
begin
	OQ_expected[0] = 1'bX;
end 
// generate trigger
always @(dry_expected or dry or err_expected or err or OQ_expected or OQ)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dry = %b | expected err = %b | expected OQ = %b | ",dry_expected_prev,err_expected_prev,OQ_expected_prev);
	$display("| real dry = %b | real err = %b | real OQ = %b | ",dry_prev,err_prev,OQ_prev);
`endif
	if (
		( dry_expected_prev !== 1'bx ) && ( dry_prev !== dry_expected_prev )
		&& ((dry_expected_prev !== last_dry_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dry :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dry_expected_prev);
		$display ("     Real value = %b", dry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dry_exp = dry_expected_prev;
	end
	if (
		( err_expected_prev !== 1'bx ) && ( err_prev !== err_expected_prev )
		&& ((err_expected_prev !== last_err_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port err :: @time = %t",  $realtime);
		$display ("     Expected value = %b", err_expected_prev);
		$display ("     Real value = %b", err_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_err_exp = err_expected_prev;
	end
	if (
		( OQ_expected_prev[0] !== 1'bx ) && ( OQ_prev[0] !== OQ_expected_prev[0] )
		&& ((OQ_expected_prev[0] !== last_OQ_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OQ[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OQ_expected_prev);
		$display ("     Real value = %b", OQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OQ_exp[0] = OQ_expected_prev[0];
	end
	if (
		( OQ_expected_prev[1] !== 1'bx ) && ( OQ_prev[1] !== OQ_expected_prev[1] )
		&& ((OQ_expected_prev[1] !== last_OQ_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OQ[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OQ_expected_prev);
		$display ("     Real value = %b", OQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OQ_exp[1] = OQ_expected_prev[1];
	end
	if (
		( OQ_expected_prev[2] !== 1'bx ) && ( OQ_prev[2] !== OQ_expected_prev[2] )
		&& ((OQ_expected_prev[2] !== last_OQ_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OQ[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OQ_expected_prev);
		$display ("     Real value = %b", OQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OQ_exp[2] = OQ_expected_prev[2];
	end
	if (
		( OQ_expected_prev[3] !== 1'bx ) && ( OQ_prev[3] !== OQ_expected_prev[3] )
		&& ((OQ_expected_prev[3] !== last_OQ_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OQ[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OQ_expected_prev);
		$display ("     Real value = %b", OQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OQ_exp[3] = OQ_expected_prev[3];
	end
	if (
		( OQ_expected_prev[4] !== 1'bx ) && ( OQ_prev[4] !== OQ_expected_prev[4] )
		&& ((OQ_expected_prev[4] !== last_OQ_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OQ[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OQ_expected_prev);
		$display ("     Real value = %b", OQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OQ_exp[4] = OQ_expected_prev[4];
	end
	if (
		( OQ_expected_prev[5] !== 1'bx ) && ( OQ_prev[5] !== OQ_expected_prev[5] )
		&& ((OQ_expected_prev[5] !== last_OQ_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OQ[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OQ_expected_prev);
		$display ("     Real value = %b", OQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OQ_exp[5] = OQ_expected_prev[5];
	end
	if (
		( OQ_expected_prev[6] !== 1'bx ) && ( OQ_prev[6] !== OQ_expected_prev[6] )
		&& ((OQ_expected_prev[6] !== last_OQ_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OQ[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OQ_expected_prev);
		$display ("     Real value = %b", OQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OQ_exp[6] = OQ_expected_prev[6];
	end
	if (
		( OQ_expected_prev[7] !== 1'bx ) && ( OQ_prev[7] !== OQ_expected_prev[7] )
		&& ((OQ_expected_prev[7] !== last_OQ_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OQ[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OQ_expected_prev);
		$display ("     Real value = %b", OQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OQ_exp[7] = OQ_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DemoTop_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ack;
reg clk;
reg en;
reg [10:0] packet;
reg rst;
reg send;
// wires                                               
wire dry;
wire err;
wire [7:0] OQ;

wire sampler;                             

// assign statements (if any)                          
DemoTop i1 (
// port map - connection between master ports and signals/registers   
	.ack(ack),
	.clk(clk),
	.dry(dry),
	.en(en),
	.err(err),
	.OQ(OQ),
	.packet(packet),
	.rst(rst),
	.send(send)
);

// ack
initial
begin
	ack = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// en
initial
begin
	en = 1'b1;
end 
// packet[ 10 ]
initial
begin
	packet[10] = 1'b0;
end 
// packet[ 9 ]
initial
begin
	packet[9] = 1'b1;
end 
// packet[ 8 ]
initial
begin
	packet[8] = 1'b0;
end 
// packet[ 7 ]
initial
begin
	packet[7] = 1'b1;
end 
// packet[ 6 ]
initial
begin
	packet[6] = 1'b0;
end 
// packet[ 5 ]
initial
begin
	packet[5] = 1'b1;
end 
// packet[ 4 ]
initial
begin
	packet[4] = 1'b1;
end 
// packet[ 3 ]
initial
begin
	packet[3] = 1'b1;
end 
// packet[ 2 ]
initial
begin
	packet[2] = 1'b0;
end 
// packet[ 1 ]
initial
begin
	packet[1] = 1'b1;
end 
// packet[ 0 ]
initial
begin
	packet[0] = 1'b1;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// send
initial
begin
	send = 1'b1;
end 

DemoTop_vlg_sample_tst tb_sample (
	.ack(ack),
	.clk(clk),
	.en(en),
	.packet(packet),
	.rst(rst),
	.send(send),
	.sampler_tx(sampler)
);

DemoTop_vlg_check_tst tb_out(
	.dry(dry),
	.err(err),
	.OQ(OQ),
	.sampler_rx(sampler)
);
endmodule

